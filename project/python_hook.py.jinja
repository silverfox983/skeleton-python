#%- if True %#
# You shouldn't be seeing this file!
#%- endif %#
# (C) 2023-present Bartosz Sławecki (bswck)
"""
Copier copy/update hook script.

This script is run automatically by copier after the project is created or updated.
"""

from __future__ import annotations

import urllib.request
import json
import pprint
import sys
from os import getenv
from datetime import datetime
from pathlib import Path

LICENSE_NAME = "{{license}}"
PREVIOUS_LICENSE_NAME = getenv("LAST_LICENSE_NAME") or "Custom"
VISIBILITY = "{{visibility}}"
DOC_SYMLINKS = {
    "docs/changelog.md": "../CHANGELOG.md",
    #%- if public %#
    "docs/code_of_conduct.md": "../CODE_OF_CONDUCT.md",
    #%- endif %#
}


def generate_license_file(license: str | None = None) -> None:
    if license is None:
        license = LICENSE_NAME

    print("Previous license name:", PREVIOUS_LICENSE_NAME)
    print("Set license name:", LICENSE_NAME)
    if license in (PREVIOUS_LICENSE_NAME, "Custom"):
        print(
            "Not generating license file: "
            "license name not changed or a custom license",
        )
        return

    if Path("LICENSE").exists():
        #% if ctt %#
        do_overwrite = True
        #% else %#
        do_overwrite = (
            input(
                f"Overwrite existing LICENSE file (new license: {license})? [y/N] "
            ).strip()
            or "n"
        )[0].lower() == "y"
        #% endif %#
        if not do_overwrite:
            return

    license_text: str | None
    try:
        license_response = json.loads(
            urllib.request.urlopen(f"https://api.github.com/licenses/{license}").read(),
        )
    except urllib.error.HTTPError as exc:
        print(f"Error finding license {license}: {exc}", file=sys.stderr)
        license_text = None
    else:
        try:
            license_text = license_response["body"]
        except KeyError:
            print(f"Incorrect license output for {license}", file=sys.stderr)
            pprint.pprint(license_response, stream=sys.stderr)
            license_text = None

    if license_text:
        generated_license_text = license_text.replace(
            "[year]",
            f"{datetime.now().year}–present",
        ).replace(
            "[fullname]",
            "{{copyright}} ({{github}})",
        )
        Path("LICENSE").write_text(generated_license_text)


def generate_doc_symlinks() -> None:
    print("Generating documentation symlinks...")
    count = 0
    for dest, src in DOC_SYMLINKS.items():
        if not Path(dest).exists():
            Path(dest).symlink_to(src)
            print(f"  {dest} -> {src}")
            count += 1
    print(f"Generated {count} documentation symlinks")


def main() -> None:
    generate_license_file()
    #%- if docs %#
    generate_doc_symlinks()
    #%- endif %#


if __name__ == "__main__":
    main()
